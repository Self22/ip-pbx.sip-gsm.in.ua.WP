{"version":3,"sources":["jqBootstrapValidation.js"],"names":["$","regexFromString","inputstring","RegExp","executeFunctionByName","functionName","context","args","Array","prototype","slice","call","arguments","splice","namespaces","split","func","pop","i","length","apply","this","createdElements","defaults","options","prependExistingHelpBlock","sniffHtml","preventSubmit","submitError","submitSuccess","semanticallyStrict","autoAdd","helpBlocks","filter","methods","init","settings","extend","$siblingElements","uniqueForms","unique","map","parents","toArray","bind","e","$form","warningsFound","$inputs","find","not","trigger","each","el","$this","$controlGroup","first","hasClass","removeClass","addClass","preventDefault","isFunction","jqBootstrapValidation","$helpBlock","validatorNames","append","push","message","undefined","attr","data","max","min","builtInValidators","required","toLowerCase","number","parts","replace","validatorNamesToInspect","newValidatorNamesToInspect","formatValidatorName","i2","el2","validator","type","shortcut","validators","hasOverrideMessage","foundValidator","validatorTypes","validatorType","validatorTemplate","name","validatorTemplateType","error","html","event","params","value","getValue","errorsFound","validatorTypeArray","includeEmpty","blockSubmit","submitting","validate","triggerHandler","join","oldCount","j","original","sort","destroy","unbind","indexOf","remove","collectErrors","errorMessages","$el","errors","hasErrors","concat","override","newDefaults","callback","validatorName","lastValue","val","lastValid","lastFinished","rrjqbvValidator","rrjqbvThis","window","valid","setTimeout","ajax","url","dataType","success","failure","regex","test","negative","match","element","parseFloat","maxlength","minlength","maxchecked","elements","minchecked","email","validemail","passwordagain","positive","integer","positivenumber","negativenumber","checkone","m","p1","p2","toUpperCase","is","fn","method","jQuery"],"mappings":"CAUA,SAAWA,GA81BP,QAASC,GAAgBC,GACrB,MAAO,IAAIC,QAAO,IAAMD,EAAc,KAS1C,QAASE,GAAsBC,EAAcC,GAIzC,IAAK,GAHDC,GAAOC,MAAMC,UAAUC,MAAMC,KAAKC,WAAWC,OAAO,GACpDC,EAAaT,EAAaU,MAAM,KAChCC,EAAOF,EAAWG,MACbC,EAAI,EAAGA,EAAIJ,EAAWK,OAAQD,IACnCZ,EAAUA,EAAQQ,EAAWI,GAEjC,OAAOZ,GAAQU,GAAMI,MAAMC,KAAMd,GA72BrC,GAAIe,MAEAC,GACAC,SACIC,0BAA0B,EAC1BC,WAAW,EACXC,eAAe,EACfC,aAAa,EACbC,eAAe,EACfC,oBAAoB,EACpBC,SACIC,YAAY,GAEhBC,OAAQ,WAEJ,OAAO,IAGfC,SACIC,KAAM,SAAUX,GAEZ,GAAIY,GAAWpC,EAAEqC,QAAO,KAAUd,EAElCa,GAASZ,QAAUxB,EAAEqC,QAAO,EAAMD,EAASZ,QAASA,EAEpD,IAAIc,GAAmBjB,KAEnBkB,EAAcvC,EAAEwC,OAChBF,EAAiBG,IAAI,WACjB,MAAOzC,GAAEqB,MAAMqB,QAAQ,QAAQ,KAChCC,UAsCP,OAnCA3C,GAAEuC,GAAaK,KAAK,SAAU,SAAUC,GACpC,GAAIC,GAAQ9C,EAAEqB,MACV0B,EAAgB,EAChBC,EAAUF,EAAMG,KAAK,yBAAyBC,IAAI,8BAA8BjB,OAAOG,EAASZ,QAAQS,OAC5Ge,GAAQG,QAAQ,qBAAqBA,QAAQ,kCAE7CH,EAAQI,KAAK,SAAUlC,EAAGmC,GACtB,GAAIC,GAAQtD,EAAEqD,GACVE,EAAgBD,EAAMZ,QAAQ,eAAec,OAE7CD,GAAcE,SAAS,aAEvBF,EAAcG,YAAY,WAAWC,SAAS,SAC9CZ,OAIRC,EAAQG,QAAQ,kCAEZJ,GACIX,EAASZ,QAAQG,eACjBkB,EAAEe,iBAENd,EAAMa,SAAS,SACX3D,EAAE6D,WAAWzB,EAASZ,QAAQI,cAC9BQ,EAASZ,QAAQI,YAAYkB,EAAOD,EAAGG,EAAQc,sBAAsB,iBAAiB,MAG1FhB,EAAMY,YAAY,SACd1D,EAAE6D,WAAWzB,EAASZ,QAAQK,gBAC9BO,EAASZ,QAAQK,cAAciB,EAAOD,MAK3CxB,KAAK+B,KAAK,WAGb,GAAIE,GAAQtD,EAAEqB,MACVkC,EAAgBD,EAAMZ,QAAQ,eAAec,QAC7CO,EAAaR,EAAcN,KAAK,eAAeO,QAC/CV,EAAQQ,EAAMZ,QAAQ,QAAQc,QAC9BQ,IAeJ,KAZKD,EAAW5C,QAAUiB,EAASZ,QAAQO,SAAWK,EAASZ,QAAQO,QAAQC,aAC3E+B,EAAa/D,EAAE,8BACfuD,EAAcN,KAAK,aAAagB,OAAOF,GACvCzC,EAAgB4C,KAAKH,EAAW,KAShC3B,EAASZ,QAAQE,UAAW,CAC5B,GAAIyC,GAAU,EAed,IAX8BC,SAA1Bd,EAAMe,KAAK,aACXF,EAAU,iFACNb,EAAMgB,KAAK,8BACXH,EAAUb,EAAMgB,KAAK,6BAEzBhB,EAAMgB,KAAK,2BAA4BH,GACvCb,EAAMgB,KAAK,yBAA0BhB,EAAMe,KAAK,aAK1BD,SAAtBd,EAAMe,KAAK,QAAwDD,SAAhCd,EAAMe,KAAK,iBAAgC,CAC9E,GAAIE,GAA6BH,SAAtBd,EAAMe,KAAK,OAAuBf,EAAMe,KAAK,OAASf,EAAMe,KAAK,gBAC5EF,GAAU,yBAA2BI,EAAM,oDACvCjB,EAAMgB,KAAK,0BACXH,EAAUb,EAAMgB,KAAK,yBAEzBhB,EAAMgB,KAAK,uBAAwBH,GACnCb,EAAMgB,KAAK,mBAAoBC,GAKnC,GAA0BH,SAAtBd,EAAMe,KAAK,QAAwDD,SAAhCd,EAAMe,KAAK,iBAAgC,CAC9E,GAAIG,GAA6BJ,SAAtBd,EAAMe,KAAK,OAAuBf,EAAMe,KAAK,OAASf,EAAMe,KAAK,gBAC5EF,GAAU,wBAA0BK,EAAM,oDACtClB,EAAMgB,KAAK,0BACXH,EAAUb,EAAMgB,KAAK,yBAEzBhB,EAAMgB,KAAK,uBAAwBH,GACnCb,EAAMgB,KAAK,mBAAoBE,GAKHJ,SAA5Bd,EAAMe,KAAK,eACXF,EAAU,yBAA2Bb,EAAMe,KAAK,aAAe,qEAC3Df,EAAMgB,KAAK,gCACXH,EAAUb,EAAMgB,KAAK,+BAEzBhB,EAAMgB,KAAK,6BAA8BH,GACzCb,EAAMgB,KAAK,+BAAgChB,EAAMe,KAAK,eAK1BD,SAA5Bd,EAAMe,KAAK,eACXF,EAAU,0BAA4Bb,EAAMe,KAAK,aAAe,qEAC5Df,EAAMgB,KAAK,gCACXH,EAAUb,EAAMgB,KAAK,+BAEzBhB,EAAMgB,KAAK,6BAA8BH,GACzCb,EAAMgB,KAAK,+BAAgChB,EAAMe,KAAK,eAK3BD,SAA3Bd,EAAMe,KAAK,aAA6DD,SAAhCd,EAAMe,KAAK,mBACnDF,EAAU/B,EAASqC,kBAAkBC,SAASP,QAC1Cb,EAAMgB,KAAK,+BACXH,EAAUb,EAAMgB,KAAK,8BAEzBhB,EAAMgB,KAAK,4BAA6BH,IAKjBC,SAAvBd,EAAMe,KAAK,SAA8D,WAArCf,EAAMe,KAAK,QAAQM,gBACvDR,EAAU/B,EAASqC,kBAAkBG,OAAOT,QACxCb,EAAMgB,KAAK,6BACXH,EAAUb,EAAMgB,KAAK,4BAEzBhB,EAAMgB,KAAK,0BAA2BH,IAKfC,SAAvBd,EAAMe,KAAK,SAA8D,UAArCf,EAAMe,KAAK,QAAQM,gBACvDR,EAAU,mFACNb,EAAMgB,KAAK,+BACXH,EAAUb,EAAMgB,KAAK,+BACdhB,EAAMgB,KAAK,4BAClBH,EAAUb,EAAMgB,KAAK,2BAEzBhB,EAAMgB,KAAK,8BAA+BH,IAKbC,SAA7Bd,EAAMe,KAAK,gBACXF,EAAU,2CAA6Cb,EAAMe,KAAK,cAAgB,oEAC9Ef,EAAMgB,KAAK,iCACXH,EAAUb,EAAMgB,KAAK,gCAEzBhB,EAAMgB,KAAK,8BAA+BH,GAC1Cb,EAAMgB,KAAK,iCAAkChB,EAAMe,KAAK,gBAK3BD,SAA7Bd,EAAMe,KAAK,gBACXF,EAAU,yCAA2Cb,EAAMe,KAAK,cAAgB,oEAC5Ef,EAAMgB,KAAK,iCACXH,EAAUb,EAAMgB,KAAK,gCAEzBhB,EAAMgB,KAAK,8BAA+BH,GAC1Cb,EAAMgB,KAAK,iCAAkChB,EAAMe,KAAK,gBAS/BD,SAA7Bd,EAAMgB,KAAK,gBACXN,EAAiBV,EAAMgB,KAAK,cAAcvD,MAAM,MAIpDf,EAAEoD,KAAKE,EAAMgB,OAAQ,SAAUpD,EAAGmC,GAC9B,GAAIwB,GAAQ3D,EAAE4D,QAAQ,WAAY,OAAO/D,MAAM,IAC9B,gBAAb8D,EAAM,IAAuBA,EAAM,IACnCb,EAAeE,KAAKW,EAAM,KAQlC,IAAIE,GAA0Bf,EAC1BgB,IAEJ,GAGIhF,GAAEoD,KAAKY,EAAgB,SAAU9C,EAAGmC,GAChCW,EAAe9C,GAAK+D,EAAoB5B,KAI5CW,EAAiBhE,EAAEwC,OAAOwB,GAG1BgB,KACAhF,EAAEoD,KAAK2B,EAAyB,SAAU7D,EAAGmC,GACzC,GAAmDe,SAA/Cd,EAAMgB,KAAK,aAAejB,EAAK,YAG/BrD,EAAEoD,KAAKE,EAAMgB,KAAK,aAAejB,EAAK,YAAYtC,MAAM,KAAM,SAAUmE,EAAIC,GACxEH,EAA2Bd,KAAKiB,SAEjC,IAAI/C,EAASqC,kBAAkBpB,EAAGsB,eAAgB,CAGrD,GAAIS,GAAYhD,EAASqC,kBAAkBpB,EAAGsB,cACT,cAAjCS,EAAUC,KAAKV,eACf3E,EAAEoD,KAAKgC,EAAUE,SAASvE,MAAM,KAAM,SAAUG,EAAGmC,GAC/CA,EAAK4B,EAAoB5B,GACzB2B,EAA2Bd,KAAKb,GAChCW,EAAeE,KAAKb,QAMpC0B,EAA0BC,QAErBD,EAAwB5D,OAAS,EAM1C,IAAIoE,KAEJvF,GAAEoD,KAAKY,EAAgB,SAAU9C,EAAGmC,GAEhC,GAAIc,GAAUb,EAAMgB,KAAK,aAAejB,EAAK,WACzCmC,EAAkCpB,SAAZD,EACtBsB,GAAiB,CA+BrB,IA9BAtB,EAEQA,EACMA,EACA,IAAMd,EAAK,2DAA6DA,EAAGsB,cAAgB,gDAIzG3E,EAAEoD,KACEhB,EAASsD,eACT,SAAUC,EAAeC,GACaxB,SAA9BmB,EAAWI,KACXJ,EAAWI,OAEVF,GAAkGrB,SAAhFd,EAAMgB,KAAK,aAAejB,EAAK4B,EAAoBW,EAAkBC,SACxFN,EAAWI,GAAezB,KACtBlE,EAAEqC,QACE,GAEIwD,KAAMZ,EAAoBW,EAAkBC,MAC5C1B,QAASA,GAEbyB,EAAkBzD,KAAKmB,EAAOD,KAGtCoC,GAAiB,MAKxBA,GAAkBrD,EAASqC,kBAAkBpB,EAAGsB,eAAgB,CAEjE,GAAIS,GAAYpF,EAAEqC,QAAO,KAAUD,EAASqC,kBAAkBpB,EAAGsB,eAC7Da,KACAJ,EAAUjB,QAAUA,EAExB,IAAIwB,GAAgBP,EAAUC,KAAKV,aAEb,cAAlBgB,EACAF,GAAiB,EAEjBzF,EAAEoD,KACEhB,EAASsD,eACT,SAAUI,EAAuBF,GACaxB,SAAtCmB,EAAWO,KACXP,EAAWO,OAEVL,GAAkBE,IAAkBG,EAAsBnB,gBAC3DrB,EAAMgB,KAAK,aAAejB,EAAK4B,EAAoBW,EAAkBC,MAAOT,EAAUQ,EAAkBC,KAAKlB,gBAC7GY,EAAWI,GAAezB,KACtBlE,EAAEqC,OACE+C,EACAQ,EAAkBzD,KAAKmB,EAAOD,KAGtCoC,GAAiB,KAOhCA,GACDzF,EAAE+F,MAAM,oCAAsC1C,EAAK,OAQ3DU,EAAWO,KACP,oBAEIP,EAAWO,KAAK,qBACVP,EAAWO,KAAK,qBAChBP,EAAWiC,QAIzBjC,EAAWO,KACP,gBAEIP,EAAWO,KAAK,iBACVP,EAAWO,KAAK,iBAChBP,EAAWM,KAAK,SAI9Bd,EAAce,KACV,mBAEIf,EAAce,KAAK,mBACbf,EAAce,KAAK,oBACnBf,EAAcc,KAAK,UAIjCf,EAAMgB,KACF,wBAEIhB,EAAMgB,KAAK,yBACLhB,EAAMgB,KAAK,yBACXhB,EAAMe,KAAK,iBAQzBf,EAAMV,KACF,wBACA,SAAUqD,EAAOC,GAEb,GAAIC,GAAQC,EAAS9C,GAGjB+C,IAYJ,OAVArG,GAAEoD,KAAKmC,EAAY,SAAUI,EAAeW,IACpCH,GAASA,EAAMhF,QAAW+E,GAAUA,EAAOK,cAAoBnE,EAASsD,eAAeC,GAAea,aAAeN,GAAYA,EAAOO,aACxIzG,EAAEoD,KAAKkD,EAAoB,SAAUpF,EAAGkE,GAChChD,EAASsD,eAAeC,GAAee,SAASpD,EAAO6C,EAAOf,IAC9DiB,EAAYnC,KAAKkB,EAAUjB,aAMpCkC,IAIf/C,EAAMV,KACF,2BACA,WACI,MAAO2C,KAOfjC,EAAMV,KACF,oBACA,WACI,MAAOU,GAAMqD,eAAe,qBAAsBF,YAAY,MAGtEnD,EAAMV,MAEE,QACA,QACA,OACA,QACA,UACA,WACA,UACFgE,KAAK,gBAAkB,cACzB,SAAU/D,EAAGqD,GAET,GAAIC,GAAQC,EAAS9C,GAEjB+C,IAEJ9C,GAAcN,KAAK,yBAAyBG,KAAK,SAAUlC,EAAGmC,GAC1D,GAAIwD,GAAWR,EAAYlF,MAI3B,IAHAnB,EAAEoD,KAAKpD,EAAEqD,GAAIsD,eAAe,wBAAyBT,GAAS,SAAUY,EAAG3C,GACvEkC,EAAYnC,KAAKC,KAEjBkC,EAAYlF,OAAS0F,EACrB7G,EAAEqD,GAAIgB,KAAK,eAAgB,YACxB,CACH,GAAI0C,GAAWzD,EAAMgB,KAAK,wBAC1BtE,GAAEqD,GAAIgB,KAAK,eAA8BD,SAAb2C,GAAyBA,MAI7DjE,EAAMG,KAAK,yBAAyBC,IAAII,GAAOJ,IAAI,UAAaI,EAAMe,KAAK,QAAU,MAAOlB,QAAQ,kCAEpGkD,EAAcrG,EAAEwC,OAAO6D,EAAYW,QAG/BX,EAAYlF,QAEZoC,EAAcG,YAAY,iBAAiBC,SAAS,WAGhDvB,EAASZ,QAAQM,oBAA6C,IAAvBuE,EAAYlF,OAEnD4C,EAAWiC,KAAKK,EAAY,IACtBjE,EAASZ,QAAQC,yBAA2BsC,EAAWO,KAAK,qBAAuB,KAGzFP,EAAWiC,KAAK,wBAA4BK,EAAYO,KAAK,aAAe,cACtExE,EAASZ,QAAQC,yBAA2BsC,EAAWO,KAAK,qBAAuB,OAG7Ff,EAAcG,YAAY,yBACtByC,EAAMhF,OAAS,GACfoC,EAAcI,SAAS,WAE3BI,EAAWiC,KAAKjC,EAAWO,KAAK,uBAGrB,SAAXzB,EAAEwC,MACF9B,EAAcG,YAAY,aAItCJ,EAAMV,KAAK,iCAAkC,WACzCW,EAAcG,YAAY,gBAItCuD,QAAS,WAEL,MAAO5F,MAAK+B,KACR,WAEI,GACIE,GAAQtD,EAAEqB,MACVkC,EAAgBD,EAAMZ,QAAQ,eAAec,QAC7CO,EAAaR,EAAcN,KAAK,eAAeO,OAGnDF,GAAM4D,OAAO,eAEbnD,EAAWiC,KAAKjC,EAAWO,KAAK,sBAEhCf,EAAcc,KAAK,QAASd,EAAce,KAAK,qBAE/ChB,EAAMe,KAAK,eAAgBf,EAAMgB,KAAK,0BAEtCP,EAAWM,KAAK,OAAQf,EAAMgB,KAAK,kBAE/BhD,EAAgB6F,QAAQpD,EAAW,KAAM,GACzCA,EAAWqD,YAO3BC,cAAe,SAAUd,GAErB,GAAIe,KAcJ,OAbAjG,MAAK+B,KAAK,SAAUlC,EAAGmC,GACnB,GAAIkE,GAAMvH,EAAEqD,GACRwC,EAAO0B,EAAIlD,KAAK,QAChBmD,EAASD,EAAIZ,eAAe,yBAA0BJ,cAAc,GACxEe,GAAczB,GAAQ7F,EAAEqC,QAAO,EAAMmF,EAAQF,EAAczB,MAG/D7F,EAAEoD,KAAKkE,EAAe,SAAUpG,EAAGmC,GACb,IAAdA,EAAGlC,cACImG,GAAcpG,KAItBoG,GAGXG,UAAW,WAEP,GAAIH,KAQJ,OANAjG,MAAK+B,KAAK,SAAUlC,EAAGmC,GACnBiE,EAAgBA,EAAcI,OAC1B1H,EAAEqD,GAAIsD,eAAe,4BAA8B3G,EAAEqD,GAAIsD,eAAe,yBAA0BF,YAAY,UAI9Ga,EAAcnG,OAAS,GAEnCwG,SAAU,SAAUC,GAChBrG,EAAWvB,EAAEqC,QAAO,EAAMd,EAAUqG,KAG5ClC,gBACImC,UACIhC,KAAM,WACN1D,KAAM,SAAUmB,EAAOuC,GACnB,OACIiC,cAAejC,EACfgC,SAAUvE,EAAMgB,KAAK,aAAeuB,EAAO,YAC3CkC,UAAWzE,EAAM0E,MACjBC,WAAW,EACXC,cAAc,IAGtBxB,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,GAAIA,EAAU2C,YAAc5B,GAASf,EAAU8C,aAC3C,OAAQ9C,EAAU6C,SAGtB,IAAI7C,EAAU8C,gBAAiB,EAAM,CACjC9C,EAAU2C,UAAY5B,EACtBf,EAAU6C,WAAY,EACtB7C,EAAU8C,cAAe,CAEzB,IAAIC,GAAkB/C,EAClBgD,EAAa9E,CACjBlD,GACIgF,EAAUyC,SACVQ,OACA/E,EACA6C,EACA,SAAU7B,GACF6D,EAAgBJ,YAAczD,EAAK6B,QACnCgC,EAAgBF,UAAY3D,EAAKgE,MAC7BhE,EAAKH,UACLgE,EAAgBhE,QAAUG,EAAKH,SAEnCgE,EAAgBD,cAAe,EAC/BE,EAAW9D,KAAK,aAAe6D,EAAgBL,cAAgB,UAAWK,EAAgBhE,SAE1FoE,WAAW,WACPH,EAAWjF,QAAQ,sBACpB,MAMnB,OAAO,IAIfqF,MACI3C,KAAM,OACN1D,KAAM,SAAUmB,EAAOuC,GACnB,OACIiC,cAAejC,EACf4C,IAAKnF,EAAMgB,KAAK,aAAeuB,EAAO,QACtCkC,UAAWzE,EAAM0E,MACjBC,WAAW,EACXC,cAAc,IAGtBxB,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAAI,GAAKA,EAAU2C,WAAc,GAAK5B,GAASf,EAAU8C,gBAAiB,EAC/D9C,EAAU6C,aAAc,GAG/B7C,EAAU8C,gBAAiB,IAC3B9C,EAAU2C,UAAY5B,EACtBf,EAAU6C,WAAY,EACtB7C,EAAU8C,cAAe,EACzBlI,EAAEwI,MACEC,IAAKrD,EAAUqD,IACfnE,KAAM,SAAW6B,EAAQ,UAAY7C,EAAMe,KAAK,QAChDqE,SAAU,OACVC,QAAS,SAAUrE,GACX,GAAKc,EAAU2C,WAAc,GAAKzD,EAAK6B,QACvCf,EAAU6C,YAAe3D,EAAU,MAC/BA,EAAKH,UACLiB,EAAUjB,QAAUG,EAAKH,SAE7BiB,EAAU8C,cAAe,EACzB5E,EAAMgB,KAAK,aAAec,EAAU0C,cAAgB,UAAW1C,EAAUjB,SAEzEoE,WAAW,WACPjF,EAAMH,QAAQ,sBACf,KAGXyF,QAAS,WACLxD,EAAU6C,WAAY,EACtB7C,EAAUjB,QAAU,mBACpBiB,EAAU8C,cAAe,EACzB5E,EAAMgB,KAAK,aAAec,EAAU0C,cAAgB,UAAW1C,EAAUjB,SAEzEoE,WAAW,WACPjF,EAAMH,QAAQ,sBACf,QAKR,KAIf0F,OACIhD,KAAM,QACN1D,KAAM,SAAUmB,EAAOuC,GACnB,OAAQgD,MAAO5I,EAAgBqD,EAAMgB,KAAK,aAAeuB,EAAO,YAEpEa,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,OAASA,EAAUyD,MAAMC,KAAK3C,KAAWf,EAAU2D,UAC3C3D,EAAUyD,MAAMC,KAAK3C,IAAUf,EAAU2D,WAGzDrE,UACImB,KAAM,WACN1D,KAAM,SAAUmB,EAAOuC,GACnB,UAEJa,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,QAA2B,IAAjBe,EAAMhF,QAAiBiE,EAAU2D,cACjC5C,EAAMhF,OAAS,GAAKiE,EAAU2D,WAE5CvC,aAAa,GAEjBwC,OACInD,KAAM,QACN1D,KAAM,SAAUmB,EAAOuC,GACnB,GAAIoD,GAAU3F,EAAMZ,QAAQ,QAAQc,QAAQP,KAAK,UAAaK,EAAMgB,KAAK,aAAeuB,EAAO,SAAW,MAAOrC,OAIjH,OAHAyF,GAAQrG,KAAK,wBAAyB,WAClCU,EAAMH,QAAQ,qBAAsBsD,YAAY,OAE5CwC,QAAWA,IAEvBvC,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAAQe,KAAUf,EAAU6D,QAAQjB,QAAU5C,EAAU2D,UAChD5C,IAAUf,EAAU6D,QAAQjB,OAAS5C,EAAU2D,UAE3DvC,aAAa,GAEjBjC,KACIsB,KAAM,MACN1D,KAAM,SAAUmB,EAAOuC,GACnB,OAAQtB,IAAKjB,EAAMgB,KAAK,aAAeuB,EAAO,SAElDa,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAAQ8D,YAAW/C,EAAO,IAAM+C,WAAW9D,EAAUb,IAAK,MAAQa,EAAU2D,UACpEG,WAAW/C,EAAO,KAAO+C,WAAW9D,EAAUb,IAAK,KAAOa,EAAU2D,WAGpFvE,KACIqB,KAAM,MACN1D,KAAM,SAAUmB,EAAOuC,GACnB,OAAQrB,IAAKlB,EAAMgB,KAAK,aAAeuB,EAAO,SAElDa,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAAQ8D,YAAW/C,GAAS+C,WAAW9D,EAAUZ,OAASY,EAAU2D,UAC5DG,WAAW/C,IAAU+C,WAAW9D,EAAUZ,MAAQY,EAAU2D,WAG5EI,WACItD,KAAM,YACN1D,KAAM,SAAUmB,EAAOuC,GACnB,OAAQsD,UAAW7F,EAAMgB,KAAK,aAAeuB,EAAO,eAExDa,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAASe,GAAMhF,OAASiE,EAAU+D,YAAe/D,EAAU2D,UAClD5C,EAAMhF,QAAUiE,EAAU+D,WAAc/D,EAAU2D,WAGnEK,WACIvD,KAAM,YACN1D,KAAM,SAAUmB,EAAOuC,GACnB,OAAQuD,UAAW9F,EAAMgB,KAAK,aAAeuB,EAAO,eAExDa,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAASe,GAAMhF,OAASiE,EAAUgE,YAAehE,EAAU2D,UAClD5C,EAAMhF,QAAUiE,EAAUgE,WAAchE,EAAU2D,WAGnEM,YACIxD,KAAM,aACN1D,KAAM,SAAUmB,EAAOuC,GACnB,GAAIyD,GAAWhG,EAAMZ,QAAQ,QAAQc,QAAQP,KAAK,UAAaK,EAAMe,KAAK,QAAU,KAIpF,OAHAiF,GAAS1G,KAAK,mBAAoB,WAC9BU,EAAMH,QAAQ,qBAAsBoD,cAAc,OAE9C8C,WAAY/F,EAAMgB,KAAK,aAAeuB,EAAO,cAAeyD,SAAUA,IAElF5C,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAAQA,GAAUkE,SAASrH,OAAO,YAAYd,OAASiE,EAAUiE,aAAejE,EAAU2D,UAClF3D,EAAUkE,SAASrH,OAAO,YAAYd,QAAUiE,EAAUiE,YAAcjE,EAAU2D,UAE9FvC,aAAa,GAEjB+C,YACI1D,KAAM,aACN1D,KAAM,SAAUmB,EAAOuC,GACnB,GAAIyD,GAAWhG,EAAMZ,QAAQ,QAAQc,QAAQP,KAAK,UAAaK,EAAMe,KAAK,QAAU,KAIpF,OAHAiF,GAAS1G,KAAK,mBAAoB,WAC9BU,EAAMH,QAAQ,qBAAsBoD,cAAc,OAE9CgD,WAAYjG,EAAMgB,KAAK,aAAeuB,EAAO,cAAeyD,SAAUA,IAElF5C,SAAU,SAAUpD,EAAO6C,EAAOf,GAC9B,MAAQA,GAAUkE,SAASrH,OAAO,YAAYd,OAASiE,EAAUmE,aAAenE,EAAU2D,UAClF3D,EAAUkE,SAASrH,OAAO,YAAYd,QAAUiE,EAAUmE,YAAcnE,EAAU2D,UAE9FvC,aAAa,IAGrB/B,mBACI+E,OACI3D,KAAM,QACNR,KAAM,WACNC,SAAU,cAEdmE,YACI5D,KAAM,aACNR,KAAM,QACNwD,MAAO,mDACP1E,QAAS,oFAEbuF,eACI7D,KAAM,gBACNR,KAAM,QACN2D,MAAO,WACP7E,QAAS,6FAEbwF,UACI9D,KAAM,WACNR,KAAM,WACNC,SAAU,yBAEdyD,UACIlD,KAAM,WACNR,KAAM,WACNC,SAAU,yBAEdV,QACIiB,KAAM,SACNR,KAAM,QACNwD,MAAO,2CACP1E,QAAS,sEAEbyF,SACI/D,KAAM,UACNR,KAAM,QACNwD,MAAO,YACP1E,QAAS,gFAEb0F,gBACIhE,KAAM,iBACNR,KAAM,MACNb,IAAK,EACLL,QAAS,uFAEb2F,gBACIjE,KAAM,iBACNR,KAAM,MACNd,IAAK,EACLJ,QAAS,uFAEbO,UACImB,KAAM,WACNR,KAAM,WACNlB,QAAS,wEAEb4F,UACIlE,KAAM,WACNR,KAAM,aACNkE,WAAY,EACZpF,QAAS,oFAKjBc,EAAsB,SAAUY,GAChC,MAAOA,GACFlB,cACAG,QACG,iBACA,SAAUkF,EAAGC,EAAIC,GACb,MAAOD,GAAKC,EAAGC,iBAM3B/D,EAAW,SAAU9C,GAErB,GAAI6C,GAAQ7C,EAAM0E,MACd3C,EAAO/B,EAAMe,KAAK,OAOtB,OANa,aAATgB,IACAc,EAAS7C,EAAM8G,GAAG,YAAcjE,EAAQ,IAE/B,UAATd,IACAc,EAASnG,EAAE,eAAiBsD,EAAMe,KAAK,QAAU,cAAclD,OAAS,EAAIgF,EAAQ,IAEjFA,EAuBXnG,GAAEqK,GAAGvG,sBAAwB,SAAUwG,GAEnC,MAAI/I,GAASW,QAAQoI,GACV/I,EAASW,QAAQoI,GAAQlJ,MAAMC,KAAMb,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IACzD,gBAAX0J,IAAwBA,GAGtCtK,EAAE+F,MAAM,UAAYuE,EAAS,mDACtB,MAHA/I,EAASW,QAAQC,KAAKf,MAAMC,KAAMT,YAQjDZ,EAAE8D,sBAAwB,SAAUtC,GAChCxB,EAAE,UAAUkD,IAAI,8BAA8BY,sBAAsB1C,MAAMC,KAAMT,aAGrF2J","file":"jqBootstrapValidation.js","sourcesContent":["/* jqBootstrapValidation\r\n * A plugin for automating validation on Twitter Bootstrap formatted forms.\r\n *\r\n * v1.3.6\r\n *\r\n * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\r\n *\r\n * http://ReactiveRaven.github.com/jqBootstrapValidation/\r\n */\r\n\r\n(function ($) {\r\n\r\n    var createdElements = [];\r\n\r\n    var defaults = {\r\n        options: {\r\n            prependExistingHelpBlock: false,\r\n            sniffHtml: true, // sniff for 'required', 'maxlength', etc\r\n            preventSubmit: true, // stop the form submit event from firing if validation fails\r\n            submitError: false, // function called if there is an error when trying to submit\r\n            submitSuccess: false, // function called just before a successful submit event is sent to the server\r\n            semanticallyStrict: false, // set to true to tidy up generated HTML output\r\n            autoAdd: {\r\n                helpBlocks: true\r\n            },\r\n            filter: function () {\r\n                // return $(this).is(\":visible\"); // only validate elements you can see\r\n                return true; // validate everything\r\n            }\r\n        },\r\n        methods: {\r\n            init: function (options) {\r\n\r\n                var settings = $.extend(true, {}, defaults);\r\n\r\n                settings.options = $.extend(true, settings.options, options);\r\n\r\n                var $siblingElements = this;\r\n\r\n                var uniqueForms = $.unique(\r\n                    $siblingElements.map(function () {\r\n                        return $(this).parents(\"form\")[0];\r\n                    }).toArray()\r\n                );\r\n\r\n                $(uniqueForms).bind(\"submit\", function (e) {\r\n                    var $form = $(this);\r\n                    var warningsFound = 0;\r\n                    var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\r\n                    $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\r\n\r\n                    $inputs.each(function (i, el) {\r\n                        var $this = $(el),\r\n                            $controlGroup = $this.parents(\".form-group\").first();\r\n                        if (\r\n                            $controlGroup.hasClass(\"warning\")\r\n                        ) {\r\n                            $controlGroup.removeClass(\"warning\").addClass(\"error\");\r\n                            warningsFound++;\r\n                        }\r\n                    });\r\n\r\n                    $inputs.trigger(\"validationLostFocus.validation\");\r\n\r\n                    if (warningsFound) {\r\n                        if (settings.options.preventSubmit) {\r\n                            e.preventDefault();\r\n                        }\r\n                        $form.addClass(\"error\");\r\n                        if ($.isFunction(settings.options.submitError)) {\r\n                            settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\r\n                        }\r\n                    } else {\r\n                        $form.removeClass(\"error\");\r\n                        if ($.isFunction(settings.options.submitSuccess)) {\r\n                            settings.options.submitSuccess($form, e);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return this.each(function () {\r\n\r\n                    // Get references to everything we're interested in\r\n                    var $this = $(this),\r\n                        $controlGroup = $this.parents(\".form-group\").first(),\r\n                        $helpBlock = $controlGroup.find(\".help-block\").first(),\r\n                        $form = $this.parents(\"form\").first(),\r\n                        validatorNames = [];\r\n\r\n                    // create message container if not exists\r\n                    if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\r\n                        $helpBlock = $('<div class=\"help-block\" />');\r\n                        $controlGroup.find('.controls').append($helpBlock);\r\n                        createdElements.push($helpBlock[0]);\r\n                    }\r\n\r\n                    // =============================================================\r\n                    //                                     SNIFF HTML FOR VALIDATORS\r\n                    // =============================================================\r\n\r\n                    // *snort sniff snuffle*\r\n\r\n                    if (settings.options.sniffHtml) {\r\n                        var message = \"\";\r\n                        // ---------------------------------------------------------\r\n                        //                                                   PATTERN\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"pattern\") !== undefined) {\r\n                            message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\r\n                            if ($this.data(\"validationPatternMessage\")) {\r\n                                message = $this.data(\"validationPatternMessage\");\r\n                            }\r\n                            $this.data(\"validationPatternMessage\", message);\r\n                            $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                       MAX\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\r\n                            var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\r\n                            message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\r\n                            if ($this.data(\"validationMaxMessage\")) {\r\n                                message = $this.data(\"validationMaxMessage\");\r\n                            }\r\n                            $this.data(\"validationMaxMessage\", message);\r\n                            $this.data(\"validationMaxMax\", max);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                       MIN\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\r\n                            var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\r\n                            message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\r\n                            if ($this.data(\"validationMinMessage\")) {\r\n                                message = $this.data(\"validationMinMessage\");\r\n                            }\r\n                            $this.data(\"validationMinMessage\", message);\r\n                            $this.data(\"validationMinMin\", min);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                 MAXLENGTH\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"maxlength\") !== undefined) {\r\n                            message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\r\n                            if ($this.data(\"validationMaxlengthMessage\")) {\r\n                                message = $this.data(\"validationMaxlengthMessage\");\r\n                            }\r\n                            $this.data(\"validationMaxlengthMessage\", message);\r\n                            $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                 MINLENGTH\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"minlength\") !== undefined) {\r\n                            message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\r\n                            if ($this.data(\"validationMinlengthMessage\")) {\r\n                                message = $this.data(\"validationMinlengthMessage\");\r\n                            }\r\n                            $this.data(\"validationMinlengthMessage\", message);\r\n                            $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                  REQUIRED\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\r\n                            message = settings.builtInValidators.required.message;\r\n                            if ($this.data(\"validationRequiredMessage\")) {\r\n                                message = $this.data(\"validationRequiredMessage\");\r\n                            }\r\n                            $this.data(\"validationRequiredMessage\", message);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                    NUMBER\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\r\n                            message = settings.builtInValidators.number.message;\r\n                            if ($this.data(\"validationNumberMessage\")) {\r\n                                message = $this.data(\"validationNumberMessage\");\r\n                            }\r\n                            $this.data(\"validationNumberMessage\", message);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                     EMAIL\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\r\n                            message = \"E-mail введён некорректно!<!-- data-validator-validemail-message to override -->\";\r\n                            if ($this.data(\"validationValidemailMessage\")) {\r\n                                message = $this.data(\"validationValidemailMessage\");\r\n                            } else if ($this.data(\"validationEmailMessage\")) {\r\n                                message = $this.data(\"validationEmailMessage\");\r\n                            }\r\n                            $this.data(\"validationValidemailMessage\", message);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                MINCHECKED\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"minchecked\") !== undefined) {\r\n                            message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\r\n                            if ($this.data(\"validationMincheckedMessage\")) {\r\n                                message = $this.data(\"validationMincheckedMessage\");\r\n                            }\r\n                            $this.data(\"validationMincheckedMessage\", message);\r\n                            $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                MAXCHECKED\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"maxchecked\") !== undefined) {\r\n                            message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\r\n                            if ($this.data(\"validationMaxcheckedMessage\")) {\r\n                                message = $this.data(\"validationMaxcheckedMessage\");\r\n                            }\r\n                            $this.data(\"validationMaxcheckedMessage\", message);\r\n                            $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\r\n                        }\r\n                    }\r\n\r\n                    // =============================================================\r\n                    //                                       COLLECT VALIDATOR NAMES\r\n                    // =============================================================\r\n\r\n                    // Get named validators\r\n                    if ($this.data(\"validation\") !== undefined) {\r\n                        validatorNames = $this.data(\"validation\").split(\",\");\r\n                    }\r\n\r\n                    // Get extra ones defined on the element's data attributes\r\n                    $.each($this.data(), function (i, el) {\r\n                        var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\r\n                        if (parts[0] === \"validation\" && parts[1]) {\r\n                            validatorNames.push(parts[1]);\r\n                        }\r\n                    });\r\n\r\n                    // =============================================================\r\n                    //                                     NORMALISE VALIDATOR NAMES\r\n                    // =============================================================\r\n\r\n                    var validatorNamesToInspect = validatorNames;\r\n                    var newValidatorNamesToInspect = [];\r\n\r\n                    do // repeatedly expand 'shortcut' validators into their real validators\r\n                    {\r\n                        // Uppercase only the first letter of each name\r\n                        $.each(validatorNames, function (i, el) {\r\n                            validatorNames[i] = formatValidatorName(el);\r\n                        });\r\n\r\n                        // Remove duplicate validator names\r\n                        validatorNames = $.unique(validatorNames);\r\n\r\n                        // Pull out the new validator names from each shortcut\r\n                        newValidatorNamesToInspect = [];\r\n                        $.each(validatorNamesToInspect, function (i, el) {\r\n                            if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\r\n                                // Are these custom validators?\r\n                                // Pull them out!\r\n                                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function (i2, el2) {\r\n                                    newValidatorNamesToInspect.push(el2);\r\n                                });\r\n                            } else if (settings.builtInValidators[el.toLowerCase()]) {\r\n                                // Is this a recognised built-in?\r\n                                // Pull it out!\r\n                                var validator = settings.builtInValidators[el.toLowerCase()];\r\n                                if (validator.type.toLowerCase() === \"shortcut\") {\r\n                                    $.each(validator.shortcut.split(\",\"), function (i, el) {\r\n                                        el = formatValidatorName(el);\r\n                                        newValidatorNamesToInspect.push(el);\r\n                                        validatorNames.push(el);\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        validatorNamesToInspect = newValidatorNamesToInspect;\r\n\r\n                    } while (validatorNamesToInspect.length > 0)\r\n\r\n                    // =============================================================\r\n                    //                                       SET UP VALIDATOR ARRAYS\r\n                    // =============================================================\r\n\r\n                    var validators = {};\r\n\r\n                    $.each(validatorNames, function (i, el) {\r\n                        // Set up the 'override' message\r\n                        var message = $this.data(\"validation\" + el + \"Message\");\r\n                        var hasOverrideMessage = (message !== undefined);\r\n                        var foundValidator = false;\r\n                        message =\r\n                            (\r\n                                message\r\n                                    ? message\r\n                                    : \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\r\n                            )\r\n                        ;\r\n\r\n                        $.each(\r\n                            settings.validatorTypes,\r\n                            function (validatorType, validatorTemplate) {\r\n                                if (validators[validatorType] === undefined) {\r\n                                    validators[validatorType] = [];\r\n                                }\r\n                                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\r\n                                    validators[validatorType].push(\r\n                                        $.extend(\r\n                                            true,\r\n                                            {\r\n                                                name: formatValidatorName(validatorTemplate.name),\r\n                                                message: message\r\n                                            },\r\n                                            validatorTemplate.init($this, el)\r\n                                        )\r\n                                    );\r\n                                    foundValidator = true;\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\r\n\r\n                            var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\r\n                            if (hasOverrideMessage) {\r\n                                validator.message = message;\r\n                            }\r\n                            var validatorType = validator.type.toLowerCase();\r\n\r\n                            if (validatorType === \"shortcut\") {\r\n                                foundValidator = true;\r\n                            } else {\r\n                                $.each(\r\n                                    settings.validatorTypes,\r\n                                    function (validatorTemplateType, validatorTemplate) {\r\n                                        if (validators[validatorTemplateType] === undefined) {\r\n                                            validators[validatorTemplateType] = [];\r\n                                        }\r\n                                        if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\r\n                                            $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\r\n                                            validators[validatorType].push(\r\n                                                $.extend(\r\n                                                    validator,\r\n                                                    validatorTemplate.init($this, el)\r\n                                                )\r\n                                            );\r\n                                            foundValidator = true;\r\n                                        }\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        if (!foundValidator) {\r\n                            $.error(\"Cannot find validation info for '\" + el + \"'\");\r\n                        }\r\n                    });\r\n\r\n                    // =============================================================\r\n                    //                                         STORE FALLBACK VALUES\r\n                    // =============================================================\r\n\r\n                    $helpBlock.data(\r\n                        \"original-contents\",\r\n                        (\r\n                            $helpBlock.data(\"original-contents\")\r\n                                ? $helpBlock.data(\"original-contents\")\r\n                                : $helpBlock.html()\r\n                        )\r\n                    );\r\n\r\n                    $helpBlock.data(\r\n                        \"original-role\",\r\n                        (\r\n                            $helpBlock.data(\"original-role\")\r\n                                ? $helpBlock.data(\"original-role\")\r\n                                : $helpBlock.attr(\"role\")\r\n                        )\r\n                    );\r\n\r\n                    $controlGroup.data(\r\n                        \"original-classes\",\r\n                        (\r\n                            $controlGroup.data(\"original-clases\")\r\n                                ? $controlGroup.data(\"original-classes\")\r\n                                : $controlGroup.attr(\"class\")\r\n                        )\r\n                    );\r\n\r\n                    $this.data(\r\n                        \"original-aria-invalid\",\r\n                        (\r\n                            $this.data(\"original-aria-invalid\")\r\n                                ? $this.data(\"original-aria-invalid\")\r\n                                : $this.attr(\"aria-invalid\")\r\n                        )\r\n                    );\r\n\r\n                    // =============================================================\r\n                    //                                                    VALIDATION\r\n                    // =============================================================\r\n\r\n                    $this.bind(\r\n                        \"validation.validation\",\r\n                        function (event, params) {\r\n\r\n                            var value = getValue($this);\r\n\r\n                            // Get a list of the errors to apply\r\n                            var errorsFound = [];\r\n\r\n                            $.each(validators, function (validatorType, validatorTypeArray) {\r\n                                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\r\n                                    $.each(validatorTypeArray, function (i, validator) {\r\n                                        if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\r\n                                            errorsFound.push(validator.message);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                            return errorsFound;\r\n                        }\r\n                    );\r\n\r\n                    $this.bind(\r\n                        \"getValidators.validation\",\r\n                        function () {\r\n                            return validators;\r\n                        }\r\n                    );\r\n\r\n                    // =============================================================\r\n                    //                                             WATCH FOR CHANGES\r\n                    // =============================================================\r\n                    $this.bind(\r\n                        \"submit.validation\",\r\n                        function () {\r\n                            return $this.triggerHandler(\"change.validation\", {submitting: true});\r\n                        }\r\n                    );\r\n                    $this.bind(\r\n                        [\r\n                            \"keyup\",\r\n                            \"focus\",\r\n                            \"blur\",\r\n                            \"click\",\r\n                            \"keydown\",\r\n                            \"keypress\",\r\n                            \"change\"\r\n                        ].join(\".validation \") + \".validation\",\r\n                        function (e, params) {\r\n\r\n                            var value = getValue($this);\r\n\r\n                            var errorsFound = [];\r\n\r\n                            $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\r\n                                var oldCount = errorsFound.length;\r\n                                $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\r\n                                    errorsFound.push(message);\r\n                                });\r\n                                if (errorsFound.length > oldCount) {\r\n                                    $(el).attr(\"aria-invalid\", \"true\");\r\n                                } else {\r\n                                    var original = $this.data(\"original-aria-invalid\");\r\n                                    $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\r\n                                }\r\n                            });\r\n\r\n                            $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\r\n\r\n                            errorsFound = $.unique(errorsFound.sort());\r\n\r\n                            // Were there any errors?\r\n                            if (errorsFound.length) {\r\n                                // Better flag it up as a warning.\r\n                                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\r\n\r\n                                // How many errors did we find?\r\n                                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\r\n                                    // Only one? Being strict? Just output it.\r\n                                    $helpBlock.html(errorsFound[0] +\r\n                                        ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\r\n                                } else {\r\n                                    // Multiple? Being sloppy? Glue them together into an UL.\r\n                                    $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\r\n                                        ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\r\n                                }\r\n                            } else {\r\n                                $controlGroup.removeClass(\"warning error success\");\r\n                                if (value.length > 0) {\r\n                                    $controlGroup.addClass(\"success\");\r\n                                }\r\n                                $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n                            }\r\n\r\n                            if (e.type === \"blur\") {\r\n                                $controlGroup.removeClass(\"success\");\r\n                            }\r\n                        }\r\n                    );\r\n                    $this.bind(\"validationLostFocus.validation\", function () {\r\n                        $controlGroup.removeClass(\"success\");\r\n                    });\r\n                });\r\n            },\r\n            destroy: function () {\r\n\r\n                return this.each(\r\n                    function () {\r\n\r\n                        var\r\n                            $this = $(this),\r\n                            $controlGroup = $this.parents(\".form-group\").first(),\r\n                            $helpBlock = $controlGroup.find(\".help-block\").first();\r\n\r\n                        // remove our events\r\n                        $this.unbind('.validation'); // events are namespaced.\r\n                        // reset help text\r\n                        $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n                        // reset classes\r\n                        $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\r\n                        // reset aria\r\n                        $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\r\n                        // reset role\r\n                        $helpBlock.attr(\"role\", $this.data(\"original-role\"));\r\n                        // remove all elements we created\r\n                        if (createdElements.indexOf($helpBlock[0]) > -1) {\r\n                            $helpBlock.remove();\r\n                        }\r\n\r\n                    }\r\n                );\r\n\r\n            },\r\n            collectErrors: function (includeEmpty) {\r\n\r\n                var errorMessages = {};\r\n                this.each(function (i, el) {\r\n                    var $el = $(el);\r\n                    var name = $el.attr(\"name\");\r\n                    var errors = $el.triggerHandler(\"validation.validation\", {includeEmpty: true});\r\n                    errorMessages[name] = $.extend(true, errors, errorMessages[name]);\r\n                });\r\n\r\n                $.each(errorMessages, function (i, el) {\r\n                    if (el.length === 0) {\r\n                        delete errorMessages[i];\r\n                    }\r\n                });\r\n\r\n                return errorMessages;\r\n\r\n            },\r\n            hasErrors: function () {\r\n\r\n                var errorMessages = [];\r\n\r\n                this.each(function (i, el) {\r\n                    errorMessages = errorMessages.concat(\r\n                        $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {submitting: true}) : []\r\n                    );\r\n                });\r\n\r\n                return (errorMessages.length > 0);\r\n            },\r\n            override: function (newDefaults) {\r\n                defaults = $.extend(true, defaults, newDefaults);\r\n            }\r\n        },\r\n        validatorTypes: {\r\n            callback: {\r\n                name: \"callback\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        validatorName: name,\r\n                        callback: $this.data(\"validation\" + name + \"Callback\"),\r\n                        lastValue: $this.val(),\r\n                        lastValid: true,\r\n                        lastFinished: true\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    if (validator.lastValue === value && validator.lastFinished) {\r\n                        return !validator.lastValid;\r\n                    }\r\n\r\n                    if (validator.lastFinished === true) {\r\n                        validator.lastValue = value;\r\n                        validator.lastValid = true;\r\n                        validator.lastFinished = false;\r\n\r\n                        var rrjqbvValidator = validator;\r\n                        var rrjqbvThis = $this;\r\n                        executeFunctionByName(\r\n                            validator.callback,\r\n                            window,\r\n                            $this,\r\n                            value,\r\n                            function (data) {\r\n                                if (rrjqbvValidator.lastValue === data.value) {\r\n                                    rrjqbvValidator.lastValid = data.valid;\r\n                                    if (data.message) {\r\n                                        rrjqbvValidator.message = data.message;\r\n                                    }\r\n                                    rrjqbvValidator.lastFinished = true;\r\n                                    rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\r\n                                    // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                                    setTimeout(function () {\r\n                                        rrjqbvThis.trigger(\"change.validation\");\r\n                                    }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                                }\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                    return false;\r\n\r\n                }\r\n            },\r\n            ajax: {\r\n                name: \"ajax\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        validatorName: name,\r\n                        url: $this.data(\"validation\" + name + \"Ajax\"),\r\n                        lastValue: $this.val(),\r\n                        lastValid: true,\r\n                        lastFinished: true\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    if (\"\" + validator.lastValue === \"\" + value && validator.lastFinished === true) {\r\n                        return validator.lastValid === false;\r\n                    }\r\n\r\n                    if (validator.lastFinished === true) {\r\n                        validator.lastValue = value;\r\n                        validator.lastValid = true;\r\n                        validator.lastFinished = false;\r\n                        $.ajax({\r\n                            url: validator.url,\r\n                            data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\r\n                            dataType: \"json\",\r\n                            success: function (data) {\r\n                                if (\"\" + validator.lastValue === \"\" + data.value) {\r\n                                    validator.lastValid = !!(data.valid);\r\n                                    if (data.message) {\r\n                                        validator.message = data.message;\r\n                                    }\r\n                                    validator.lastFinished = true;\r\n                                    $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                                    // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                                    setTimeout(function () {\r\n                                        $this.trigger(\"change.validation\");\r\n                                    }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                                }\r\n                            },\r\n                            failure: function () {\r\n                                validator.lastValid = true;\r\n                                validator.message = \"ajax call failed\";\r\n                                validator.lastFinished = true;\r\n                                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                                // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                                setTimeout(function () {\r\n                                    $this.trigger(\"change.validation\");\r\n                                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    return false;\r\n\r\n                }\r\n            },\r\n            regex: {\r\n                name: \"regex\",\r\n                init: function ($this, name) {\r\n                    return {regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (!validator.regex.test(value) && !validator.negative)\r\n                        || (validator.regex.test(value) && validator.negative);\r\n                }\r\n            },\r\n            required: {\r\n                name: \"required\",\r\n                init: function ($this, name) {\r\n                    return {};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return !!(value.length === 0 && !validator.negative)\r\n                        || !!(value.length > 0 && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            },\r\n            match: {\r\n                name: \"match\",\r\n                init: function ($this, name) {\r\n                    var element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\r\n                    element.bind(\"validation.validation\", function () {\r\n                        $this.trigger(\"change.validation\", {submitting: true});\r\n                    });\r\n                    return {\"element\": element};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (value !== validator.element.val() && !validator.negative)\r\n                        || (value === validator.element.val() && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            },\r\n            max: {\r\n                name: \"max\",\r\n                init: function ($this, name) {\r\n                    return {max: $this.data(\"validation\" + name + \"Max\")};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (parseFloat(value, 10) > parseFloat(validator.max, 10) && !validator.negative)\r\n                        || (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\r\n                }\r\n            },\r\n            min: {\r\n                name: \"min\",\r\n                init: function ($this, name) {\r\n                    return {min: $this.data(\"validation\" + name + \"Min\")};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (parseFloat(value) < parseFloat(validator.min) && !validator.negative)\r\n                        || (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\r\n                }\r\n            },\r\n            maxlength: {\r\n                name: \"maxlength\",\r\n                init: function ($this, name) {\r\n                    return {maxlength: $this.data(\"validation\" + name + \"Maxlength\")};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return ((value.length > validator.maxlength) && !validator.negative)\r\n                        || ((value.length <= validator.maxlength) && validator.negative);\r\n                }\r\n            },\r\n            minlength: {\r\n                name: \"minlength\",\r\n                init: function ($this, name) {\r\n                    return {minlength: $this.data(\"validation\" + name + \"Minlength\")};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return ((value.length < validator.minlength) && !validator.negative)\r\n                        || ((value.length >= validator.minlength) && validator.negative);\r\n                }\r\n            },\r\n            maxchecked: {\r\n                name: \"maxchecked\",\r\n                init: function ($this, name) {\r\n                    var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n                    elements.bind(\"click.validation\", function () {\r\n                        $this.trigger(\"change.validation\", {includeEmpty: true});\r\n                    });\r\n                    return {maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"), elements: elements};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (validator.elements.filter(\":checked\").length > validator.maxchecked && !validator.negative)\r\n                        || (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            },\r\n            minchecked: {\r\n                name: \"minchecked\",\r\n                init: function ($this, name) {\r\n                    var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n                    elements.bind(\"click.validation\", function () {\r\n                        $this.trigger(\"change.validation\", {includeEmpty: true});\r\n                    });\r\n                    return {minchecked: $this.data(\"validation\" + name + \"Minchecked\"), elements: elements};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (validator.elements.filter(\":checked\").length < validator.minchecked && !validator.negative)\r\n                        || (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            }\r\n        },\r\n        builtInValidators: {\r\n            email: {\r\n                name: \"Email\",\r\n                type: \"shortcut\",\r\n                shortcut: \"validemail\"\r\n            },\r\n            validemail: {\r\n                name: \"Validemail\",\r\n                type: \"regex\",\r\n                regex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\r\n                message: \"E-mail введён некорректно!<!-- data-validator-validemail-message to override -->\"\r\n            },\r\n            passwordagain: {\r\n                name: \"Passwordagain\",\r\n                type: \"match\",\r\n                match: \"password\",\r\n                message: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\r\n            },\r\n            positive: {\r\n                name: \"Positive\",\r\n                type: \"shortcut\",\r\n                shortcut: \"number,positivenumber\"\r\n            },\r\n            negative: {\r\n                name: \"Negative\",\r\n                type: \"shortcut\",\r\n                shortcut: \"number,negativenumber\"\r\n            },\r\n            number: {\r\n                name: \"Number\",\r\n                type: \"regex\",\r\n                regex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\r\n                message: \"Must be a number<!-- data-validator-number-message to override -->\"\r\n            },\r\n            integer: {\r\n                name: \"Integer\",\r\n                type: \"regex\",\r\n                regex: \"[+-]?\\\\\\d+\",\r\n                message: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\r\n            },\r\n            positivenumber: {\r\n                name: \"Positivenumber\",\r\n                type: \"min\",\r\n                min: 0,\r\n                message: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\r\n            },\r\n            negativenumber: {\r\n                name: \"Negativenumber\",\r\n                type: \"max\",\r\n                max: 0,\r\n                message: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\r\n            },\r\n            required: {\r\n                name: \"Required\",\r\n                type: \"required\",\r\n                message: \"This is required<!-- data-validator-required-message to override -->\"\r\n            },\r\n            checkone: {\r\n                name: \"Checkone\",\r\n                type: \"minchecked\",\r\n                minchecked: 1,\r\n                message: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\r\n            }\r\n        }\r\n    };\r\n\r\n    var formatValidatorName = function (name) {\r\n        return name\r\n            .toLowerCase()\r\n            .replace(\r\n                /(^|\\s)([a-z])/g,\r\n                function (m, p1, p2) {\r\n                    return p1 + p2.toUpperCase();\r\n                }\r\n            )\r\n            ;\r\n    };\r\n\r\n    var getValue = function ($this) {\r\n        // Extract the value we're talking about\r\n        var value = $this.val();\r\n        var type = $this.attr(\"type\");\r\n        if (type === \"checkbox\") {\r\n            value = ($this.is(\":checked\") ? value : \"\");\r\n        }\r\n        if (type === \"radio\") {\r\n            value = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\r\n        }\r\n        return value;\r\n    };\r\n\r\n    function regexFromString(inputstring) {\r\n        return new RegExp(\"^\" + inputstring + \"$\");\r\n    }\r\n\r\n    /**\r\n     * Thanks to Jason Bunting via StackOverflow.com\r\n     *\r\n     * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\r\n     * Short link: http://tinyurl.com/executeFunctionByName\r\n     **/\r\n    function executeFunctionByName(functionName, context /*, args*/) {\r\n        var args = Array.prototype.slice.call(arguments).splice(2);\r\n        var namespaces = functionName.split(\".\");\r\n        var func = namespaces.pop();\r\n        for (var i = 0; i < namespaces.length; i++) {\r\n            context = context[namespaces[i]];\r\n        }\r\n        return context[func].apply(this, args);\r\n    }\r\n\r\n    $.fn.jqBootstrapValidation = function (method) {\r\n\r\n        if (defaults.methods[method]) {\r\n            return defaults.methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            return defaults.methods.init.apply(this, arguments);\r\n        } else {\r\n            $.error('Method ' + method + ' does not exist on jQuery.jqBootstrapValidation');\r\n            return null;\r\n        }\r\n\r\n    };\r\n\r\n    $.jqBootstrapValidation = function (options) {\r\n        $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this, arguments);\r\n    };\r\n\r\n})(jQuery);\r\n"]}